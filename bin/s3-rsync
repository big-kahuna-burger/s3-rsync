#!/usr/bin/env node

var s3sync = require('..')
var path = require('path')
var resolve = path.resolve
var ms = require('pretty-ms')
var program = require('commander')
var Progress = require('progress')
var humanFormat = require('human-format')

var defaultCreds
try {
  defaultCreds = require(process.env.HOME + '/.s3-rsync.json')
  console.log('.s3-rsync.json found')
} catch (err) {
  defaultCreds = {}
}

program
  .version(require('../package.json'))
  .usage('-k <key> -s <secret> -b <bucket> local-dir [s3-prefix]')
  .option('-k, --key <api key>', 'specify s3 api key')
  .option('-s, --secret <secret>', 'specify s3 secret')
  .option('-b, --bucket <bucket>', 'specify s3 bucket')
  .option('-e, --endpoint <endpoint>', 'specify s3 endpoint')
  .option('-p, --port <port>', 'specify s3 port')
  .option('-P, --path-style', 'force s3 "path style"')
  .parse(process.argv)

function die (msg) {
  console.error('Usage: s3-rsync -k <key> -s <secret> -b <bucket> local-dir [s3-prefix]')
  console.error(msg)
  process.exit(1)
}

var localRaw = program.args.shift() || die('Please provide a local directory')

var local = resolve(localRaw)

var remote = program.args.shift() || ''

var key = program.key || defaultCreds.key || die('Please provide an API key')
var secret = program.secret || defaultCreds.secret || die('Please provide an API secret')
var bucket = program.bucket || defaultCreds.bucket || die('Please provide a bucket')

var endpoint = program.endpoint || defaultCreds.endpoint || 's3.amazonaws.com'

var opts = {
  local: local,
  remote: remote,
  key: key,
  secret: secret,
  bucket: bucket,
  endpoint: endpoint,
  port: program.port,
  style: program.pathStyle ? 'path' : undefined
}

var sync = s3sync(opts, function (err) {
  if (err) return console.error(err)
  console.log('DONE!')
})

var nFiles
var iFile = 1
sync.on('transferList', function (list) {
  if (!list.size) return console.log('Directory synced, no files to transfer.')
  nFiles = list.files.length
  var size = humanFormat(list.size).replace(' ', '')
  console.log('Transferring %d files (%s) to %s on %s', nFiles, size, bucket, endpoint)
})

sync.on('fileTransferred', function (file) {
  iFile += 1
  var fn = file.file.replace(local, '')
  var size = humanFormat(file.size).replace(' ', '')
  console.log('\nTransferred %s (%s)', fn, size)
})

var bar
var lastWritten = 0
var startTime = Date.now()
var lastTime = Date.now()
var lastFile

sync.on('progress', function (prog) {
  lastFile = prog.file.file.replace(local, '')

  bar = bar || new Progress(
    '[:bar] :percent  :_elapsed  :written  :speed  ETA: :_eta  (:iFile/:nFiles) :lastFile', {
      total: prog.allTotal,
      width: 20,
      complete: '=',
      incomplete: ' '
    }
  )

  var now = Date.now()
  var written = prog.allWritten - lastWritten
  var elapsed = (now - lastTime)/1000
  var speed = humanFormat(written / elapsed).replace(' ', '') + '/s'
  var left = prog.allTotal - prog.allWritten
  var avgSpeed = prog.allWritten / (Date.now() - startTime)
  var eta = left / avgSpeed

  var pct = prog.allWritten / prog.allTotal
  bar.update(pct, {
    speed: speed,
    iFile: iFile,
    nFiles: nFiles,
    lastFile: truncate(lastFile, 30),
    _eta: ms(eta),
    _elapsed: ms(elapsed*1000),
    written: humanFormat(prog.allWritten).replace(' ', '')
  })

})

function truncate (file, maxLength) {
  maxLength = maxLength || 30
  if (file.length < maxLength) return file
  var basename = path.basename(file)
  if (basename.length < maxLength) return basename

  return basename.slice(0, maxLength) + '...'
}
